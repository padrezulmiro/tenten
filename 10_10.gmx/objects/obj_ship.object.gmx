<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_pc</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Init instance constants

FRONT_THRUSTER = 25;
SIDE_THRUSTER = 80;
DENSITY = 1;
INIT_FUEL = 100;
LINEAR_DAMPING = 0;
ANGULAR_DAMPING = 9;

//Init instance vars

soi_colliding = undefined;
planet_colliding = undefined;
end_target_colliding = undefined;
fuel = INIT_FUEL;

//Create and bind phy fixture

fix = physics_fixture_create();

physics_fixture_set_polygon_shape(fix);
physics_fixture_add_point(fix, 22-10, 4-8);
physics_fixture_add_point(fix, 22-10, 12-8);
physics_fixture_add_point(fix, 2-10, 20-8);
physics_fixture_add_point(fix, -2-10, 8-8);
physics_fixture_add_point(fix, 2-10, -2-8);

physics_fixture_set_density(fix, DENSITY);
physics_fixture_set_linear_damping(fix, LINEAR_DAMPING);
physics_fixture_set_angular_damping(fix, ANGULAR_DAMPING);
physics_fixture_bind(fix, id);

//Set alarms (read description for each alarm)

alarm_set(0, 10); //for pc_draw_breadcrumb

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw breadcrumbs' alarm

pc_create_breadcrumb();

alarm_set(0, 20);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Show remaining fuel
show_debug_message(string(fuel));

//Correct ship rotation

//Apply gravity assist and gravity with planet
if soi_colliding {
    if physics_test_overlap(phy_position_x, 
                            phy_position_y, 
                            phy_rotation,
                            soi_colliding) {
        
               
        pc_grav_assist(soi_colliding);                
        pc_apply_gravity(soi_colliding);
        
    } else {
        soi_colliding = undefined;
        add_assist = undefined;
    }
}

//Planet Collision

if planet_colliding {
    scr_game_over();
}

if end_target_colliding {
    show_debug_message('LVL WON!!!')
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_end_target">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>end_target_colliding = other.id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_planet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>planet_colliding = other.id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_grav_soi">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>soi_colliding = other.id;

add_assist = soi_colliding.PLANET_SPIN == -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pc_movement(keyboard_check(vk_up), 
            keyboard_check(vk_left),
            keyboard_check(vk_right)
            )
            
//Restart room with 'R'

if keyboard_check(ord('R')) room_restart();
                
//TEMP correct rotation with 'C'

if keyboard_check(ord('C')) pc_angular_drag()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
